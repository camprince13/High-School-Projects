//Cameron Prince
//original: 1/8/13
//modified: 1/10/13
//Purpose:Create a tic-tac-toe game (207)
//Tic-Tac-toe

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

const char X = 'X'; //defining constraints
const char O = 'O';
const char EMPTY = ' ';
const char TIE = 'T';
const char NO_ONE = 'N';

void instructions(); //defining functions
char askYesNo(string question);
int askNumber(string question, int high, int low = 0);
char humanPiece();
char opponent(char piece);
void displayBoard(const vector<char>& board);
bool isLegal(const vector<char>& board, int move);
int humanMove(const vector<char>& board, char human);
int computerMove(vector<char> board, char computer);
void announceWinner(char winner, char computer, char human);
char winner(const vector<char>& board);

int main()
{
	int move;  //initializes move
	const int NUM_SQUARES = 9;
	vector<char> board(NUM_SQUARES, EMPTY);

	instructions(); //calls instructions, and makes player 1 'X'
	char human = humanPiece();
	char computer = opponent(human);
	char turn = X;
	displayBoard(board);

	while (winner(board) == NO_ONE) //if no one has one and the game is not over, then it is the next player's turn
	{
		if (turn == human)
		{
			move = humanMove(board, human);
			board[move] = human;
		}
		else
		{
			move = computerMove(board, computer);
			board[move] = computer;
		}
		displayBoard(board);
		turn = opponent(turn);
	}
	//calls announceWinner where it will announce the winner
	announceWinner(winner(board), computer, human);

	system ("pause");
	return 0;
}

void instructions()
{	//tells the human player the instructions
	cout <<"Welcome to the ultimate man-machine showdown: Tic-Tac-Toe.\n";
	cout <<"--where human brain is pit against silicon processor\n\n";

	cout <<"Make your move known by entering a number, 0 - 8. The number\n";
	cout <<"corresponds to the desired board position, as illustrated:\n\n";

	cout <<"	0 | 1 | 2\n";
	cout <<"	---------\n";
	cout <<"	3 | 4 | 5\n";
	cout <<"	---------\n";
	cout <<"	6 | 7 | 8\n\n";

	cout <<"Prepare yourself, human. The battle is about to begin.\n\n";
}

char askYesNo(string question)
{	//asks human player y/n then collects the response
	char response;
	do
	{
		cout << question << " (y/n): ";
		cin >> response;
	} while (response != 'y' && response != 'n');

	return response;
}

int askNumber(string question, int high, int low)
{	//asks the player a question, then the player gives coordinates of their move
	int number;
	do
	{
		cout << question << " (" << low << " - " << high << "):";
		cin >> number;
	} while (number > high || number < low);

	return number;
}

char humanPiece()
{	//asks if the wants to go first, if y then they go first, if n, they do not
	char go_first = askYesNo ("Do you require the first move?");
	if(go_first == 'y')
	{
		cout << "\nThen take the first move.\n";
		return X;
	}
	else
	{
		cout << "\n... I will go first.\n";
		return O;
	}
}

char opponent(char piece)
{	//if the player is first and places an X, then the computer places an O
	//if nothing is placed then the computer places a X
	if(piece == X)
	{
		return O;
	}
	else
	{
		return X;
	}
}

void displayBoard(const vector<char>& board)
{	//the board
	cout <<"\n\t" << board[0] << " | " << board[1] << " | " << board[2];
	cout <<"\n\t" << "--------";
	cout <<"\n\t" << board[3] << " | " << board[4] << " | " << board[5];
	cout <<"\n\t" << "--------";
	cout <<"\n\t" << board[6] << " | " << board[7] << " | " << board[8];
	cout <<"\n\n";
}

char winner(const vector<char>& board)
{
	//a list of all possible winning rows
	const int WINNING_ROWS[8][3] ={ {0, 1, 2},
				       {3, 4, 5},
				       {6, 7, 8},
				       {0, 3, 6},
				       {1, 4, 7},
				       {2, 5, 8},
				       {0, 4, 8},
				       {2, 4, 6} };

const int TOTAL_ROWS = 8;

//if any winning row has 3 values that are the same, but not empty, then there is a winner

	for(int row = 0; row < TOTAL_ROWS; ++row)
	{
		if ( (board[WINNING_ROWS[row][0]] != EMPTY) &&
		     (board[WINNING_ROWS[row][0]] == board[WINNING_ROWS[row][1]]) &&
		     (board[WINNING_ROWS[row][1]] == board[WINNING_ROWS[row][2]]) )
		{
			return board[WINNING_ROWS[row][0]];
		}
	}

	//if there are no empty squares and no one has won, then there is a tie
	if (count(board.begin(), board.end(), EMPTY) == 0)
		return TIE;

	//if nobody has won and it is not a tie, then the game is not over
	return NO_ONE;
}

inline bool isLegal(int move, const vector<char>& board)
{	//if the spot is empty, then it is a legal move
	return (board[move] == EMPTY);
}

int humanMove(const vector<char>& board, char human)
{	//asks where the human player will move
	//if the move is illegal, then it tells the human player
	int move = askNumber("Where will you move?", (board.size() - 1));
	while (!isLegal(move, board))
	{
		cout << "\nThat square is already occupied, foolish human.\n";
		move = askNumber("Where will you move?", (board.size() - 1));
	}
	cout << "Fine...\n";
	return move;
}

int computerMove(vector<char>board, char computer)
{
	unsigned int move = 0;
	bool found = false;

	//if the computer can win on its next move, it will do that move
	while (!found && move < board.size())
	{
		if (isLegal(move, board))
		{
			board[move] = computer;
			found = winner(board) == computer;
			board[move] = EMPTY;
		}

		if (!found)
		{
			++move;
		}
	}

	//if the human can win on the next move, then the computer will make that move
	//to block the human from winning
	if (!found)
	{
		move = 0;
		char human = opponent(computer);

		while (!found && move < board.size())
		{
			if(isLegal(move, board))
			{
				board[move] = human;
				found = winner(board) == human;
				board[move] = EMPTY;
			}

			if (!found)
			{
				++move;
			}
		}
	}

	//if the computer cannot win/block the human on the next move then it will
	// take the next best open square

	if(!found)
	{
		move = 0;
		unsigned int i = 0;
		const int BEST_MOVES[] = {4, 0, 2, 6, 8, 1, 3, 5, 7};
		//pick the best open square
		while (!found && i < board.size())
		{
			move = BEST_MOVES[i];
			if (isLegal(move, board))
			{
				found = true;
			}
			++i;
		}
	}
	cout <<"I shall take square number " << move << endl;
	return move;
}

void announceWinner(char winner, char computer, char human)//announces the winner
{	//if the computer wins
	if(winner == computer)
	{
		cout << winner << "'s won!\n";
		cout << "Congratulations , you lost to an inanimate object.\n";
	}
	//if the human wins
	else if (winner == human)
	{
		cout << winner << "'s won!\n";
		cout << "Congratulations , you won against an inanimate object.\n";
	}
	//if its a tie
	else
	{
		cout << "It's a tie\n";
	}
}
